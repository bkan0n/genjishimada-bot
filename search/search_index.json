{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Genji Shimada Bot Documentation","text":"<p>Welcome to the architecture and operations handbook for the Genji Shimada Discord bot. This site is designed for both internal maintainers and community contributors who want to understand how the bot is structured, how its background services communicate, and the patterns we follow when building new features.</p>"},{"location":"#how-to-use-this-guide","title":"How to use this guide","text":"<ul> <li>Start with the architecture section to learn how the bot boots, how extensions are registered, and how jobs flow through RabbitMQ.</li> <li>Review the user experience guidelines before crafting embeds, newsfeed entries, or interactive views so you can match the existing presentation layer.</li> <li>Consult the operations section when deploying new environments, rotating secrets, or debugging infrastructure.</li> </ul>"},{"location":"#repository-quick-facts","title":"Repository quick facts","text":"<ul> <li>Runtime: Python 3.13+ with <code>discord.py</code> and a collection of domain-specific extensions.</li> <li>Infrastructure: RabbitMQ for job queues, PostgreSQL for persistence, and optional Sentry monitoring.</li> <li>Local tooling: <code>just</code> recipes, Ruff linting, BasedPyright type checking, and container-based development via Docker Compose.</li> </ul>"},{"location":"#getting-started","title":"Getting started","text":"<ol> <li>Clone the repository and install dependencies using <code>uv</code> or your preferred PEP 517 workflow.</li> <li>Copy the example environment files in <code>configs/</code> and populate secrets.</li> <li>Launch the local stack with <code>just run</code> or <code>docker compose -f docker-compose.dev.yml up</code>.</li> <li>Use this documentation to understand the modules you are extending or debugging.</li> </ol> <p>Need to update this site? See Working on the Docs for instructions on editing and publishing changes.</p>"},{"location":"architecture/core-bot/","title":"Core Bot Lifecycle","text":"<p>This page explains how the main Discord bot process boots, configures intents, and loads feature modules.</p>"},{"location":"architecture/core-bot/#entry-point","title":"Entry point","text":"<p>The bot starts from <code>main.py</code>, which defines the <code>run_bot</code> coroutine. Key steps:</p> <ol> <li>Load configuration via <code>load_settings</code> and environment variables.</li> <li>Establish shared clients (PostgreSQL, RabbitMQ, HTTP) through the dependency container in <code>core.dependencies</code>.</li> <li>Instantiate the <code>Genji</code> bot subclass with intents defined in <code>core.client</code>.</li> <li>Register background services and extensions during <code>setup_hook</code>.</li> </ol> <p>The <code>Genji</code> class in <code>core/client.py</code> extends <code>discord.ext.commands.Bot</code>. It configures:</p> <ul> <li>A custom <code>tree</code> sync strategy to keep slash commands consistent across guilds.</li> <li>Gateway intents aligned with our feature set (message content, reactions, scheduled events).</li> <li>Hooks to bind services (e.g., newsfeed, completions, XP) before the bot connects.</li> </ul>"},{"location":"architecture/core-bot/#extension-loading","title":"Extension loading","text":"<p>Extensions live in the <code>extensions/</code> package. During startup, <code>Genji.setup_hook</code> iterates through the registry defined in <code>core/extensions.py</code> and loads each extension module. Each extension exposes a <code>setup</code> function that adds a cog or registers tasks.</p>"},{"location":"architecture/core-bot/#base-classes","title":"Base classes","text":"<ul> <li><code>BaseExtension</code> in <code>core/extensions/base.py</code> standardizes access to shared resources like the dependency container.</li> <li><code>BaseService</code> in <code>core/services/base.py</code> provides lifecycle hooks (<code>start</code>, <code>stop</code>) and centralized error reporting.</li> </ul>"},{"location":"architecture/core-bot/#startup-sequencing","title":"Startup sequencing","text":"<ol> <li><code>setup_hook</code> awaits <code>BaseService.start</code> for registered services (notifications, completions, XP, etc.).</li> <li>Queue handlers are registered through decorators (see Messaging &amp; Queues).</li> <li>Extension-specific scheduled tasks are scheduled after all services have initialized.</li> </ol> <p>Use this section as a roadmap when adding new services\u2014ensure they inherit from the appropriate base class, register with the dependency container, and participate in the startup lifecycle.</p>"},{"location":"architecture/messaging/","title":"Messaging &amp; Queues","text":"<p>The bot relies on RabbitMQ for asynchronous work. Queue handlers are responsible for consuming messages, validating payloads, and triggering downstream updates.</p>"},{"location":"architecture/messaging/#rabbitmq-integration","title":"RabbitMQ integration","text":"<ul> <li>The connection and channel lifecycle lives in <code>core/messaging/rabbit.py</code>.</li> <li><code>core.messaging.registry</code> exposes <code>register_queue_handler</code> and <code>get_registered_handlers</code> to keep a central list of queues.</li> <li>The queue worker service (see Services &amp; Extensions) consumes <code>QueueMessage</code> objects and dispatches them to handlers.</li> </ul>"},{"location":"architecture/messaging/#queue-handler-lifecycle","title":"Queue handler lifecycle","text":"<ol> <li>Decorate a coroutine with <code>@register_queue_handler(\"queue-name\")</code>.</li> <li>Type your payload with <code>msgspec</code> models or dataclasses.</li> <li>The worker pulls the job, deserializes the payload, and invokes your coroutine with contextual information (logging, tracing, Sentry breadcrumbs).</li> </ol>"},{"location":"architecture/messaging/#error-handling","title":"Error handling","text":"<ul> <li>Handlers should raise domain-specific exceptions so the worker can determine retry vs. dead-lettering.</li> <li>Use <code>core.messaging.errors</code> for shared error types.</li> <li>The worker logs failures and reports them to Sentry if configured.</li> </ul>"},{"location":"architecture/messaging/#queue-catalog","title":"Queue catalog","text":"<p>Document active queues here to keep the system transparent:</p> Queue Producer Handler Notes <code>newsfeed.refresh</code> Newsfeed service scheduler <code>extensions.newsfeed.handlers.refresh_newsfeed</code> Regenerates the community newsfeed embeds. <code>notifications.dispatch</code> Domain services emitting notifications <code>extensions.notifications.handlers.dispatch_notification</code> Sends DM or channel notifications with standardized embeds. <code>xp.events</code> Game telemetry ingestors <code>extensions.xp.handlers.process_xp_event</code> Applies XP gains/losses and updates leaderboard visuals. <p>Add rows for new queues as they come online so maintainers can trace message flow quickly.</p>"},{"location":"architecture/services/","title":"Services &amp; Extensions","text":"<p>Services encapsulate long-lived behavior and shared integrations. Extensions provide Discord-facing commands, views, and event handlers that rely on those services.</p>"},{"location":"architecture/services/#service-catalog","title":"Service catalog","text":"Service Module Responsibilities Notifications <code>extensions/notifications/service.py</code> Consumes queue events to deliver Discord notifications and manages notification-related views. Newsfeed <code>extensions/newsfeed/service.py</code> Generates the community newsfeed, composes embeds, and schedules refresh jobs. XP <code>extensions/xp/service.py</code> Tracks player progression, processes XP events from queues, and updates Discord roles or embeds. Completions <code>extensions/completions/service.py</code> Handles run submissions, uses the GenjiPK SDK, and triggers newsfeed updates. Playtest <code>extensions/playtest/service.py</code> Coordinates playtest sessions and DM reminders. Notifications Queue Worker <code>core/services/queue_worker.py</code> Boots RabbitMQ consumers, delegates jobs to registered handlers, and ensures graceful shutdown. <p>Extend this table as new services ship to keep a single authoritative map of long-lived processes.</p>"},{"location":"architecture/services/#extension-anatomy","title":"Extension anatomy","text":"<ol> <li>Cog definition: Each extension defines a cog that inherits from <code>BaseExtension</code> or <code>commands.Cog</code>.</li> <li>Dependency injection: Cogs pull shared clients from the dependency container (<code>core.dependencies.container</code>).</li> <li>Queue registration: Extensions that process background jobs decorate handler coroutines with <code>@register_queue_handler</code> to bind queue names.</li> <li>View/Embed helpers: Presentation logic is centralized in <code>utilities/</code> helpers (formatters, view builders) to ensure consistent UX.</li> </ol>"},{"location":"architecture/services/#adding-a-new-service","title":"Adding a new service","text":"<ol> <li>Create a module under <code>extensions/&lt;feature&gt;/service.py</code> (or <code>core/services/</code> if it is infrastructure-wide).</li> <li>Subclass <code>BaseService</code> and implement <code>start</code>/<code>stop</code> hooks for setup and teardown.</li> <li>Register the service with the dependency container in <code>core/dependencies/factory.py</code>.</li> <li>Update <code>core/extensions.py</code> (or the relevant registry) so <code>setup_hook</code> starts the service.</li> <li>Document the queue names, configuration keys, and embeds the service controls.</li> </ol> <p>By following this structure, we maintain a consistent mental model of how features attach to the bot runtime.</p>"},{"location":"contributing/docs-workflow/","title":"Working on the Docs","text":"<p>This repository uses MkDocs with the Material theme to generate GitHub Pages content. The Markdown lives on the <code>main</code> branch and a GitHub Actions workflow publishes the rendered static site to the <code>gh-pages</code> branch that GitHub Pages serves. Follow the steps below to propose updates.</p>"},{"location":"contributing/docs-workflow/#local-preview","title":"Local preview","text":"<ol> <li>Install MkDocs and the Material theme:    <code>bash    uv tool install mkdocs    uv tool install mkdocs-material</code>    Or add them to a virtual environment with <code>pip install mkdocs mkdocs-material</code>.</li> <li>Start the live preview:    <code>bash    mkdocs serve</code></li> <li>Open http://127.0.0.1:8000 to browse the docs with hot reload.</li> </ol>"},{"location":"contributing/docs-workflow/#branching-strategy","title":"Branching strategy","text":"<ol> <li>Create a topic branch from <code>main</code>:    <code>bash    git checkout -b docs/update-whatever</code></li> <li>Commit Markdown and configuration changes under <code>docs/</code> and <code>mkdocs.yml</code>.</li> <li>Push to GitHub and open a pull request targeting <code>main</code>.</li> </ol>"},{"location":"contributing/docs-workflow/#publishing-to-github-pages","title":"Publishing to GitHub Pages","text":"<ol> <li>Ensure the Publish Docs workflow (<code>.github/workflows/publish-docs.yml</code>) is enabled. It runs on every push to <code>main</code> and takes care of building the static site with <code>mkdocs build --strict</code>.</li> <li>In repository settings, set GitHub Pages to serve from the <code>gh-pages</code> branch (root). The workflow pushes the latest <code>site/</code> output there using the built-in <code>GITHUB_TOKEN</code>, so no extra secrets are needed.</li> <li>After the workflow finishes, the site appears at https://bkan0n.github.io/genjishimada-bot/. If you need to validate a change before merging, run <code>mkdocs build --strict</code> locally to catch broken links.</li> </ol>"},{"location":"contributing/docs-workflow/#writing-guidelines","title":"Writing guidelines","text":"<ul> <li>Keep content narrative and architecture-focused\u2014avoid auto-generated API dumps.</li> <li>Link directly to source files on GitHub (for example, <code>https://github.com/bkan0n/genjishimada-bot/blob/main/path/to/file.py</code>) so readers can jump into the code.</li> <li>Add diagrams or tables where they improve clarity; store assets under <code>docs/assets/</code>.</li> <li>Document new services, queues, or embeds as soon as they ship so this guide remains current.</li> </ul> <p>Questions? Ping the maintainers in the <code>#bot-dev</code> Discord channel for review or direction.</p>"},{"location":"operations/configuration/","title":"Configuration &amp; Deployment","text":"<p>This page collects operational knowledge for running the Genji Shimada bot in local, staging, and production environments.</p>"},{"location":"operations/configuration/#environment-configuration","title":"Environment configuration","text":"<p>Configuration is loaded from TOML files in <code>configs/</code> alongside environment variables.</p> <ol> <li>Copy <code>configs/example.local.toml</code> (or the relevant template) to <code>configs/local.toml</code>.</li> <li>Populate secrets: Discord bot token, application ID, RabbitMQ credentials, PostgreSQL DSN, Sentry DSN.</li> <li>Set <code>BOT_ENVIRONMENT</code> to distinguish between <code>local</code>, <code>staging</code>, and <code>production</code> deployments.</li> </ol> <p>Keep secrets out of version control. Use 1Password vault entries or GitHub repository secrets for CI/CD.</p>"},{"location":"operations/configuration/#local-development-workflow","title":"Local development workflow","text":"<ol> <li>Install dependencies using <code>uv sync</code>.</li> <li>Start supporting services: <code>docker compose -f docker-compose.dev.yml up -d rabbitmq postgres</code>.</li> <li>Launch the bot with <code>just run</code> (or <code>uv run python main.py</code>).</li> <li>Run <code>just lint</code> before pushing changes.</li> </ol>"},{"location":"operations/configuration/#deployment-checklist","title":"Deployment checklist","text":"<ul> <li>[ ] Build and push container images with the appropriate tags.</li> <li>[ ] Apply database migrations if required.</li> <li>[ ] Update configuration secrets in the hosting environment.</li> <li>[ ] Restart the bot process (Kubernetes rollout, systemd service, etc.).</li> <li>[ ] Monitor Sentry and Discord logs for anomalies.</li> </ul>"},{"location":"operations/configuration/#observability","title":"Observability","text":"<ul> <li>Logging: Structured logging is configured via <code>core.logging</code>. Adjust log levels through environment variables.</li> <li>Sentry: Enabled when <code>SENTRY_DSN</code> is present. Wrap long-running tasks with breadcrumbs so errors are traceable.</li> <li>Metrics: Add instrumentation around queue throughput or message latency if needed using your preferred stack (StatsD, Prometheus).</li> </ul>"},{"location":"operations/configuration/#disaster-recovery","title":"Disaster recovery","text":"<ul> <li>Maintain regular PostgreSQL snapshots and RabbitMQ backups.</li> <li>Document manual failover procedures for each infrastructure component.</li> <li>Keep a runbook that links to this page for quick access during incidents.</li> </ul>"},{"location":"ux/newsfeed-and-embeds/","title":"Newsfeed &amp; Embeds","text":"<p>This section captures the conventions for embeds, components, and presentation patterns across the bot.</p>"},{"location":"ux/newsfeed-and-embeds/#newsfeed-philosophy","title":"Newsfeed philosophy","text":"<ul> <li>Spotlight the most relevant community events with clear headlines, concise descriptions, and contextual links.</li> <li>Keep consistency across updates so returning members can parse new posts quickly.</li> </ul>"},{"location":"ux/newsfeed-and-embeds/#builders-formatters","title":"Builders &amp; formatters","text":"<ul> <li><code>extensions.newsfeed.builders</code> contains helper functions that assemble rich embeds from domain objects.</li> <li>Shared typography and iconography live in <code>utilities/formatters.py</code>\u2014reuse these helpers rather than hard-coding strings.</li> <li>When referencing runs or player profiles, use the SDK-provided URLs to keep links evergreen.</li> </ul>"},{"location":"ux/newsfeed-and-embeds/#embed-guidelines","title":"Embed guidelines","text":"<ul> <li>Color palette: Follow the brand colors defined in <code>utilities/constants.py</code> to maintain a cohesive look.</li> <li>Fields: Prefer fewer than five fields per embed. When more detail is required, collapse information into a Discord view or thread.</li> <li>Timestamps: Use <code>discord.utils.utcnow()</code> for <code>timestamp</code> attributes to ensure consistent timezone handling.</li> <li>Footers: Include actionable context (\"Tap to view the full leaderboard\") and attribution when pulling from external sources.</li> </ul>"},{"location":"ux/newsfeed-and-embeds/#interactive-components","title":"Interactive components","text":"<ul> <li>Views in <code>utilities/views</code> encapsulate buttons, selects, and pagination helpers. Extend existing views rather than creating bespoke ones.</li> <li>When adding new buttons, supply <code>custom_id</code> constants in a dedicated module so they can be traced and invalidated if needed.</li> <li>Follow Discord rate-limit guidance\u2014batch updates rather than editing messages multiple times per second.</li> </ul>"},{"location":"ux/newsfeed-and-embeds/#accessibility-localization","title":"Accessibility &amp; localization","text":"<ul> <li>Provide alt text within embeds when using images or attachments.</li> <li>Keep copy concise and avoid slang so community translators can localize content easily.</li> <li>Use <code>utilities/i18n</code> (if present) or prepare for future localization by centralizing user-facing strings.</li> </ul> <p>Document specific embed examples here as new features launch. Including screenshots or JSON payload snippets can help future contributors reproduce the style accurately.</p>"}]}